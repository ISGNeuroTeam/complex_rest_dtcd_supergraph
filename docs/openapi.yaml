openapi: 3.0.0

info:
  title: REST API for supergraph plugin
  description: |
    This API allows interaction with Neo4j graph database.
  version: 0.3.0
  contact:
    name: Aleksei Tsysin
    email: atsysin@isgneuro.com
  license:
    name: OT.PLATFORM License agreement
    url: https://github.com/ISGNeuroTeam/Guidelines/blob/master/LICENSE.md

components:
  schemas:
    id:
      type: string
      format: uuid
      readOnly: true
    fragment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        name:
          type: string
    root:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        name:
          type: string
        fragments:
          type: array
          items:
            $ref: "#/components/schemas/fragment"
          readOnly: true
    node:
      # TODO better schema
      type: object
      properties:
        primaryID:
          # TODO move to schema
          # TODO special type?
          type: string
    edge:
      # TODO better schema
      type: object
      properties:
        sourceNode:
          type: string
        targetNode:
          type: string
        sourcePort:
          type: string
        targetPort:
          type: string
    group:
      $ref: "#/components/schemas/node"
    graph:
      # TODO better schema
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/node"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/edge"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/group"
    # TODO schema for errors and status in responses?

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"
    root_id:
      name: root_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"
    fragment_id:
      name: fragment_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/id"

  responses:
    root:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              root:
                $ref: "#/components/schemas/root"
    roots:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              roots:
                type: array
                items:
                  $ref: "#/components/schemas/root"
    graph:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              graph:
                $ref: "#/components/schemas/graph"

# TODO responses?

# TODO re-do tags
# tags:
#   - name: list
#   - name: detail
#   - name: graph
#   - name: root
#   - name: admin

paths:
  /roots:
    summary: Root list
    get:
      summary: Get all roots
      description: Retrieves an array of all existing roots.
      responses:
        "200":
          $ref: "#/components/responses/roots"
    post:
      summary: Create a new root
      description: Create a new root with a given name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/root"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    $ref: "#/components/schemas/root"

  /roots/{id}:
    summary: Root details
    description: Operations on a single root.
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get root detail
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    $ref: "#/components/schemas/root"
        "404":
          description: Not found
    put:
      summary: Update the root
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/root"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    $ref: "#/components/schemas/root"
        "400":
          description: Errors in the request body
          # TODO possible details?
        "404":
          description: Not found
    delete:
      summary: Delete the root and its content
      responses:
        "200":
          description: OK
        "404":
          description: Not found

  /roots/{id}/graph:
    summary: Graph content of the root
    description: Operations on roots's graph.
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get root's graph
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  graph:
                    $ref: "#/components/schemas/graph"
        "404":
          description: Not found
    put:
      summary: Update the graph of this root
      description: |
        We update the graph by *merging* on vertex and edge IDs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graph:
                  $ref: "#/components/schemas/graph"
      responses:
        "200":
          description: OK
        "400":
          description: Errors in the request body
          # TODO possible details?
          # TODO problems with graph loading
        "404":
          description: Not found
    delete:
      summary: Delete a graph of this root
      responses:
        "200":
          description: OK
        "404":
          description: Not found

  /roots/{id}/fragments:
    summary: List of root fragments
    description: Operations on fragments of this root.
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get a list of this root's fragments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragments:
                    type: array
                    items:
                      $ref: "#/components/schemas/fragment"
        "404":
          description: Not found
    post:
      summary: Create a new fragment inside this root
      description: Create a new fragment inside this root with a given name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fragment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "404":
          description: Not found

  /roots/{root_id}/fragments/{fragment_id}:
    summary: Details of this root's fragment
    description: Operations on a particular fragment of this root.
    parameters:
      - $ref: "#/components/parameters/root_id"
      - $ref: "#/components/parameters/fragment_id"
    get:
      summary: Get fragment detail
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "404":
          description: Not found
    put:
      summary: Update a fragment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fragment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "400":
          description: Errors in the request body
          # TODO possible details?
        "404":
          description: Not found
    delete:
      summary: Delete a fragment and its content
      responses:
        "200":
          description: OK
        "404":
          description: Not found

  /roots/{root_id}/fragments/{fragment_id}/graph:
    summary: Graph content of the fragment
    description: Operations on the graph of a particular fragment of this root.
    parameters:
      - $ref: "#/components/parameters/root_id"
      - $ref: "#/components/parameters/fragment_id"
    get:
      summary: Get fragment's graph
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  graph:
                    $ref: "#/components/schemas/graph"
        "404":
          description: Not found
    put:
      summary: Update a graph of this fragment
      description: |
        We update the graph by *merging* on vertex and edge IDs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graph:
                  $ref: "#/components/schemas/graph"
      responses:
        "200":
          description: OK
        "400":
          description: Errors in the request body
          # TODO possible details?
          # TODO problems with graph loading
        "404":
          description: Not found

  /fragments:
    summary: List of default root fragments
    get:
      summary: Get a list of default root's fragments
      description: Retrieves an array of all fragments from the default root.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragments:
                    type: array
                    items:
                      $ref: "#/components/schemas/fragment"
        "404":
          description: Default fragment not found
    post:
      summary: Create a new fragment inside the default root
      description: Create a new fragment inside the default root.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fragment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "404":
          description: Default fragment not found

  /fragments/{id}:
    summary: Details of a default root's fragment
    description: Operations on a particular fragment of a default root.
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get fragment detail
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "404":
          description: Not found
    put:
      summary: Update a fragment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fragment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  fragment:
                    $ref: "#/components/schemas/fragment"
        "400":
          description: Errors in the request body
          # TODO possible details?
        "404":
          description: Not found
    delete:
      summary: Delete a fragment and its content
      tags:
        - detail
      responses:
        "200":
          description: OK
        "404":
          description: Not found

  /fragments/{id}/graph:
    summary: Graph content of a default root's fragment
    description: Operations on a graph of a default root's fragment.
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get fragment's graph
      tags:
        - graph
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  graph:
                    $ref: "#/components/schemas/graph"
        "404":
          description: Not found
    put:
      summary: Update a graph of this fragment
      description: |
        We update the graph by *merging* on vertex and edge IDs.
      tags:
        - graph
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graph:
                  $ref: "#/components/schemas/graph"
      responses:
        "200":
          description: OK
        "400":
          description: Errors in the request body
          # TODO possible details?
          # TODO problems with graph loading
        "404":
          description: Not found
    delete:
      summary: Delete a graph of this fragment
      tags:
        - graph
      responses:
        "200":
          description: OK
        "404":
          description: Not found

  /reset:
    post:
      summary: Reset Neo4j database
      description: Delete all nodes and relationships from Neo4j database.
      responses:
        "200":
          description: Database reset
